I"@	<p>컨테이너 인프라 환경은 컨테이너를 중심으로 구성된 인프라 환경이다. <strong>컨터이너(container)는 하나의 운영체제 커널에서 다른 프로세스에 영향을 받지 않고 독립적으로 실행되는 프로세스 상태를 의미</strong>한다. 이렇게 구현된 컨테이너느 가상화 상태에서 동작하는 프로세스보다 가볍고 빠르게 동작한다.</p>

<h2 id="모놀리식-아키텍쳐"><span style="color:MediumSeaGreen">모놀리식 아키텍쳐</span></h2>
<p><strong>모놀리식 아키텍처는 하나의 큰 목적이 있는 서비스 또는 애플리케이션에 여러 기능이 통합돼 있는 구조를 의미</strong>한다.</p>

<p>모놀리식 아키텍처에서는 소프트웨어가 하나의 결합된 코드로 구성되기 때문에 초기 단계에서 설계하기 쉽고 개발이 단순하고 코드관리가 간편하다는 장점이 있다.</p>

<p>하지만 서비스를 운영 하다보면 자연스레 수정사항이 많아지게 되는데, 한 서비스를 수정하면 연관된 다른 서비스에 영향을 끼칠 가능성이 커진다는 단점이 있다. 점점 기능이 추가될수록 초기에 단순했던 서비스 관계는 매우 복잡해질 수 있다.</p>

<hr />

<h2 id="마이크로서비스-아키텍쳐"><span style="color:MediumSeaGreen">마이크로서비스 아키텍쳐</span></h2>
<p><strong>마이크로서비스 아키텍쳐는 시스템 전체가 하나의 목적을 지향하는 바는 모널리식 아키텍쳐와 동일하나, 개별 기능을 하는 작은 서비스를 각각 개발해 연결하는 데서 차이가 있다</strong>. 보안, 인증 등과 관련된 기능이 독립된 서비스를 구성하고 있으며 다른 서비스들도 독립적으로 동작할 수 있는 완결된 구조이다.</p>

<p>이런 구조로 개발된 서비스는 재사용하기 쉽고, 향후 서비스가 변경됐을 때 다른 서비스에 영향을 끼칠 가능성이 중어들어 사용량의 변화에 따라 특정 서비스만 확장할 수 있다.</p>

<p>하지만 마이크로서비스 아키텍쳐는 모놀리식 아키텍처보다 복잡도가 높고, 각 서비스가 서로 유기적으로 통신하는 구조로 설계되기 때문에 네트워크를 통한 호출 획수가 증가해 성능에 영향을 줄 수 있다.</p>
:ET