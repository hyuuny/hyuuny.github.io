I"}<h2 id="싱글톤sigleton"><span style="color:MediumSeaGreen">싱글톤(Sigleton)</span></h2>
<ul>
  <li>클래스의 인스턴스가 딱 1개만 생성되는 것을 보장하는 디자인 패턴이다.</li>
  <li>객체 인스턴스를 2개 이상 생성하지 못하도록 막아야 한다.
    <ul>
      <li>private 생성자를 사용해서 외부에서 임의로 new 키워드를 사용하지 못하도록 막아야 한다.<br />
<br /></li>
    </ul>
  </li>
</ul>

<p><strong>싱글톤 패턴의 문제점</strong></p>
<ul>
  <li>싱글톤 패턴을 구현하는 코드 자체가 많이 들어간다.</li>
  <li>의존관계상 클라이언트가 구체 클래스에 의존한다. DIP를 위반한다.</li>
  <li>클라이언트가 구체 클래스에 의존해서 OCP 원칙을 위반할 가능성이 높다.</li>
  <li>테스트하기 어렵다.</li>
  <li>내부 속성을 변경하거나 초기화 하기 어렵다.</li>
  <li>private 생성자로 자식 클래스를 만들기 어렵다.</li>
  <li>결론적으로 유연성이 떨어진다.</li>
  <li>안티패턴으로 불리기도 한다.</li>
</ul>

<hr />

<h2 id="싱글톤-컨테이너sigleton-container"><span style="color:MediumSeaGreen">싱글톤 컨테이너(Sigleton Container)</span></h2>
<p>스프링 컨테이너는 싱글톤 패턴의 문제점을 해결하면서, 객체 인스턴스를 싱글톤(1개만 생성)으로 관리한다.</p>

<ul>
  <li>스프링 컨테이너는 싱글턴 패턴을 적용하지 않아도, 객체 인스턴스를 싱글톤으로 관리한다.</li>
  <li>스프링 컨테이너는 싱글톤 컨테이너 역할을 한다. 이렇게 싱글톤 객체를 생성하고 관리하는 기능을 싱글톤 레지스트리라 한다.</li>
  <li>스프링 컨테이너의 이런 기능 덕분에 싱글턴 패턴의 모든 단점을 해결하면서 객체를 싱글톤으로 유지할 수 있다.</li>
  <li>싱글톤 패턴을 위한 지저분한 코드가 들어가지 않아도 된다.</li>
  <li>DIP, OCP, 테스트, private 생성자로 부터 자유롭게 싱글톤을 사용할 수 있다.<br />
<br /></li>
</ul>

<p><strong>싱글톤 컨테이너 테스트</strong></p>

<p><img src="/assets/images/spring/singleton-test1-1.png" alt="img.png" /></p>
<ul>
  <li>AppConif 설정 클래스에서 각각(memberService1, memberService2) 가져온다.</li>
  <li>memberService1과 memberService2가 <strong>같은 객체인지</strong> 확인한다.
<br /></li>
</ul>

<p><img src="/assets/images/spring/singleton-test1-2.png" alt="img.png" /></p>
<ul>
  <li>
    <p>스프링 컨테이너 덕분에 고객의 요청이 올 때 마다 <strong>객체를 생성하는 것이 아니라, 이미 만들어진 객체를 공유</strong>해서 효율적으로 재사용할 수 있다.</p>
  </li>
  <li>
    <p>이를 그림으로 표현하면 아래와 같다.
<img src="/assets/images/spring/singleton-test1-3.png" alt="img.png" /></p>
  </li>
</ul>

<blockquote>
  <blockquote>
    <p>스프링의 기본 빈 등록 방식은 싱글톤이지만, 싱글톤 방식만 지원하는 것은 아니다. 요청할 때 마다 새로운 객체를 생성해서 반환하는 기능도 제공한다.</p>
  </blockquote>
</blockquote>

<hr />

<h2 id="싱글톤-방식의-주의점"><span style="color:MediumSeaGreen">싱글톤 방식의 주의점</span></h2>
<ul>
  <li>싱글톤 패턴이든, 스프링 같은 싱글톤 컨테이너를 사용하든, 객체 인스턴스를 하나만 생성해서 공유하는 싱글톤 방식은 여러 클라이언트가 하나의 같은 객체 인스턴스를 공유하기 때문에 싱글톤 객체는 <strong>상태를 유지(stateful)하게 설계하면 안된다</strong>.</li>
</ul>
:ET