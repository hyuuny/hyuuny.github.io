I"w<p>컨테이너 인프라 환경은 컨테이너를 중심으로 구성된 인프라 환경이다. <strong>컨터이너(container)는 하나의 운영체제 커널에서 다른 프로세스에 영향을 받지 않고 독립적으로 실행되는 프로세스 상태를 의미</strong>한다. 이렇게 구현된 컨테이너는 가상화 상태에서 동작하는 프로세스보다 가볍고 빠르게 동작한다.</p>

<h2 id="모놀리식-아키텍쳐monolithic-architecture"><span style="color:MediumSeaGreen">모놀리식 아키텍쳐(Monolithic Architecture)</span></h2>
<p><strong>모놀리식 아키텍처는 하나의 큰 목적이 있는 서비스 또는 애플리케이션에 여러 기능이 통합돼 있는 구조를 의미</strong>한다.</p>

<p>모놀리식 아키텍처에서는 소프트웨어가 하나의 결합된 코드로 구성되기 때문에 초기 단계에서 설계하기 쉽고 개발이 단순하고 코드관리가 간편하다는 장점이 있다.</p>

<p>하지만 서비스를 운영 하다보면 자연스레 수정사항이 많아지게 되는데, 이때 한 서비스를 수정하면 연관된 다른 서비스에 영향을 끼칠 가능성이 커지게 된다. 점점 기능이 추가될수록 초기에 단순했던 서비스 관계는 매우 복잡해질 수 있다.</p>

<hr />

<h2 id="마이크로서비스-아키텍쳐msa-microservice-architecture"><span style="color:MediumSeaGreen">마이크로서비스 아키텍쳐(MSA, MicroService Architecture)</span></h2>
<p><strong>마이크로서비스 아키텍쳐는 시스템 전체가 하나의 목적을 지향하는 바는 모놀리식 아키텍쳐와 동일하지만, 개별 기능의 작은 서비스를 각각 개발해 연결하는 데서 차이가 있다</strong>. 보안, 인증 등과 관련된 기능이 독립된 서비스를 구성하고 있으며 다른 서비스들도 독립적으로 동작할 수 있는 완결된 구조이다.</p>

<p>이런 구조로 개발된 서비스는 재사용하기 쉽고, 향후 서비스가 변경됐을 때 다른 서비스에 영향을 끼칠 가능성이 줄어들어 사용량의 변화에 따라 특정 서비스만 확장할 수 있다.</p>

<p>하지만 마이크로서비스 아키텍쳐는 모놀리식 아키텍처보다 복잡도가 높고, 각 서비스가 서로 유기적으로 통신하는 구조로 설계되기 때문에 네트워크를 통한 호출 횟수가 증가해 성능에 영향을 줄 수 있다.</p>

<hr />

<h2 id="컨테이너-인프라-환경을-지원하는-도구"><span style="color:MediumSeaGreen">컨테이너 인프라 환경을 지원하는 도구</span></h2>
<p>컨테이너 인프라 환경은 크게 <strong>컨테이너</strong>, <strong>컨테이너 관리</strong>, <strong>개발 환경 구성 및 배포 자동화</strong>, <strong>모니터링</strong>으로 구성되며, 이를 지원하는 도구는 아래와 같다.</p>

<hr />

<h6 id="도커docker"><span style="color:DodgerBlue">도커(Docker)</span></h6>
<p><strong>도커는 컨테이너 환경에서 독립적으로 애플리케이션을 실행할 수 있도록 컨테이너를 만들고 관리하는 것을 도와주는 컨테이너 도구</strong>이다.</p>

<p>도커로 애플리케이션을 실행하면 <code class="language-plaintext highlighter-rouge">운영체제 환경에 상관없이 독립적인 환경에서 일관된 결과를 보장</code>한다.</p>

<hr />

<h6 id="쿠버네티스kubernetes"><span style="color:DodgerBlue">쿠버네티스(Kubernetes)</span></h6>
<p><strong>쿠버네티스는 다수의 컨테이너를 관리하는 데 사용된다</strong>.</p>

<p>컨테이너의 자동 배포와 배포된 컨테이너에 대한 동작 보증, 부하에 따른 동적 확장 등의 기능을 제공한다. 처음엔 다수의 컨테이너만 관리하는 도구였으나, 현재는 컨테이너 인프라 필요한 기능을 통합하고 관리하는 솔루션으로 발전하였다.</p>

<p>쿠버네티스는 컨테이너 인프라를 기반으로 API 게이트웨이, 서비스 디스커버리, 이벤트 버스, 인증 및 결제 등의 <code class="language-plaintext highlighter-rouge">다양한 서비스를 효율적으로 관리할 수 있는 환경을 제공하고 이를 내외부와 유연하게 연결</code>해준다.</p>

<hr />

<h6 id="젠킨스jenkins"><span style="color:DodgerBlue">젠킨스(Jenkins)</span></h6>
<p><strong>젠킨스는 지속적 통합(CI, Continuous Integration)과 지속적 배포(CD, Continuous Deployment)를 지원한다</strong>.</p>

<p>지속적 통합과 지속적 배포는 개발한 프로그램의 빌드, 테스트, 패키지화, 배포 단계를 모두 자동화해 개발 단계를 표준화한다. 개발된 코드의 빠른 적용과 효과적인 관리릍 통해 개발 생산성을 높이는 데 초점이 맞춰져있다. 즉, <code class="language-plaintext highlighter-rouge">컨테이너 인프라 환경처럼 단일 기능을 빠르게 개발해 적용해야 하는 환경에 매우 적합한 도구</code>이다.</p>

<hr />

<h6 id="프로메테우스prometheus와-그라파나grafana"><span style="color:DodgerBlue">프로메테우스(Prometheus)와 그라파나(Grafana)</span></h6>
<p><strong>프로메테우스와 그라파나는 모니터링을 위한 도구이다</strong>.</p>

<p>프로메테우스는 <code class="language-plaintext highlighter-rouge">상태 데이터를 수집</code>하고,<br />
그라파나는 <code class="language-plaintext highlighter-rouge">프로메테우스로 수집한 데이터를 관리자가 보기 좋게 시각화</code>한다.</p>

<p>컨테이너 인프라 환경에서는 많은 종류의 소규모 기능이 각각 나뉘어 개발되기 때문에 중앙 모니터링이 필요한데, 이때 효율적으로 모니터링을 하는 방법 중 하나가 프로메테우스와 그라파나의 조합이다. 
 프로메테우스와 그라파나는 컨테이너로 패키징되어 동작하며, 최소한의 자원으로 쿠버네티스 클러스터의 상태를 시각적으로 표현한다.</p>

<hr />

<p><span style="color:DarkOrange">reference</span><br />
조훈·심근우·문성주 (2021). 컨테이너 인프라 환경 구축을 위한 쿠버네티스/도커. 길벗</p>

:ET