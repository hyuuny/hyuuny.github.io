I"+<h2 id="제어의-역전inversion-of-control"><span style="color:MediumSeaGreen">제어의 역전(Inversion of Control)</span></h2>
<ul>
  <li>기존 프로그램은 클라이언트 구현 객체가 스스로 필요한 서버 구현 객체를 생성하고, 연결하고, 실행했다. 한마디로 구현 객체가 프로그램의 제어 흐름을 스스로 조종했다.</li>
  <li>AppConfig가 등장한 이후에 구현 객체는 자신의 로직을 실행하는 역할만 담당한다. 프로그램의 제어 흐름은 이제 AppConfig가 가져간다.
    <ul>
      <li>예를 들어서 <code class="language-plaintext highlighter-rouge">OrderServiceImpl</code> 은 필요한 인터페이스들(<code class="language-plaintext highlighter-rouge">repository</code>와 같은)을 호출하지만 어떤 구현 객체들이 실행될지 모른다.</li>
    </ul>
  </li>
  <li>프로그램에 대한 제어 흐름에 대한 권한은 모두 AppConfig가 가지고 있다. 심지어 <code class="language-plaintext highlighter-rouge">OrderServiceImpl</code>도 AppConfig가 생성한다.
    <ul>
      <li>AppConfig는 <code class="language-plaintext highlighter-rouge">OrderServiceImpl</code> 이 아닌 <code class="language-plaintext highlighter-rouge">OrderService</code> 인터페이스의 다른 구현 객체를 생성하고 실행할 수 도 있다.</li>
    </ul>
  </li>
  <li>이렇듯 프로그램의 <strong>제어 흐름을 직접 제어하는 것이 아니라 외부에서 관리하는 것을 제어의 역전(IoC)</strong>이라 한다.<br />
<br /></li>
</ul>

<p><span style="color:DodgerBlue">프레임워크와 라이브러리</span></p>
<ul>
  <li>프레임워크가 내가 작성한 코드를 제어하고, 대신 실행하면 프레임워크이다.</li>
  <li>내가 작성한 코드가 직접 제어의 흐름을 담당한다면 프레임워크가 아니라 라이브러리다.</li>
</ul>

<hr />

<h2 id="의존관계-주입-didependency-injection"><span style="color:MediumSeaGreen">의존관계 주입 DI(Dependency Injection)</span></h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">OrderServiceImpl</span> <span class="kd">implements</span> <span class="nc">OrderService</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="kd">final</span> <span class="nc">DiscountPolicy</span> <span class="n">discountPolicy</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li><code class="language-plaintext highlighter-rouge">OrderServiceImpl</code>은 <code class="language-plaintext highlighter-rouge">DiscountPolicy</code> 인터페이스에 의존한다. 실제 어떤 구현 객체가 사용될지는
모른다.</li>
  <li>의존관계는 <strong>정적인 클래스 의존 관계</strong>와, <strong>실행 시점에 결정되는 동적인 객체(인스턴스) 의존 관계</strong> 둘을 분리해서 생각해야 한다.<br />
<br /></li>
</ul>

<p><span style="color:DodgerBlue">정적인 클래스 의존관계</span></p>
<ul>
  <li>클래스가 사용하는 import 코드만 보고 의존관계를 쉽게 판단할 수 있다. 정적인 의존관계는 애플리케이션을 실행하지 않아도 분석할 수 있다.</li>
  <li><code class="language-plaintext highlighter-rouge">OrderServiceImpl</code>은 <code class="language-plaintext highlighter-rouge">MemberRepository</code> , <code class="language-plaintext highlighter-rouge">DiscountPolicy</code>에 의존한다는 것을 알 수 있다.
그런데 이러한 클래스 의존관계 만으로는 실제 어떤 객체가 <code class="language-plaintext highlighter-rouge">OrderServiceImpl</code>에 주입 될지 알 수 없다.</li>
</ul>

<p><img src="/assets/images/spring/di1.png" alt="img.png" /></p>

<p><br /></p>

<p><span style="color:DodgerBlue">동적인 객체 인스턴스 의존 관계</span></p>
<ul>
  <li><strong>애플리케이션 실행 시점에</strong> 실제 생성된 객체 인스턴스의 참조가 연결된 의존 관계다.</li>
</ul>

<p><img src="/assets/images/spring/di2.png" alt="img.png" /></p>

<ul>
  <li>애플리케이션 <strong>실행 시점(런타임)</strong>에 외부에서 실제 구현 객체를 생성하고 클라이언트에 전달해서 클라이언트와 서버의 실제 의존관계가 연결 되는 것을 <strong>의존관계 주입</strong>이라 한다.</li>
  <li>객체 인스턴스를 생성하고, 그 참조값을 전달해서 연결된다.</li>
  <li>의존관계 주입을 사용하면 클라이언트 코드를 변경하지 않고, 클라이언트가 호출하는 대상의 타입 인스턴스를 변경할 수 있다.</li>
  <li>의존관계 주입을 사용하면 <strong>정적인 클래스 의존관계를 변경하지 않고, 동적인 객체 인스턴스 의존관계를 쉽게 변경</strong>할 수 있다.</li>
</ul>

<hr />

<h2 id="ioc-컨테이너-di-컨테이너"><span style="color:MediumSeaGreen">IoC 컨테이너, DI 컨테이너</span></h2>
<ul>
  <li>AppConfig 처럼 <strong>객체를 생성하고 관리하면서 의존관계를 연결해 주는 것을 IoC 컨테이너 또는 DI 컨테이너</strong>라 한다.</li>
  <li>의존관계 주입에 초점을 맞추어 <strong>최근에는 주로 DI 컨테이너</strong>라 한다.</li>
</ul>
:ET