I"f	<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nd">@Configuration</span>
  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppConfig</span> <span class="o">{</span>

      <span class="nd">@Bean</span>
      <span class="kd">public</span> <span class="nc">MemberService</span> <span class="nf">memberService</span><span class="o">()</span> <span class="o">{</span>
          <span class="k">return</span> <span class="k">new</span> <span class="nf">MemberServiceImpl</span><span class="o">(</span><span class="n">memberRepository</span><span class="o">());</span>
      <span class="o">}</span>

      <span class="nd">@Bean</span>
      <span class="kd">public</span> <span class="nc">OrderService</span> <span class="nf">orderService</span><span class="o">()</span> <span class="o">{</span>
          <span class="k">return</span> <span class="k">new</span> <span class="nf">OrderServiceImpl</span><span class="o">(</span><span class="n">memberRepository</span><span class="o">(),</span> <span class="n">discountPolicy</span><span class="o">());</span>
      <span class="o">}</span>

      <span class="nd">@Bean</span>
      <span class="kd">public</span> <span class="nc">MemberRepository</span> <span class="nf">memberRepository</span><span class="o">()</span> <span class="o">{</span>
          <span class="k">return</span> <span class="k">new</span> <span class="nf">MemoryMemberRepository</span><span class="o">();</span>
      <span class="o">}</span>
    <span class="o">...</span> 

<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>memberService 빈을 만드는 코드를 보면 <code class="language-plaintext highlighter-rouge">memberRepository()</code>를 호출한다.</li>
  <li>orderService 빈을 만드는 코드도 동일하게 <code class="language-plaintext highlighter-rouge">memberRepository()</code>를 호출한다.</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">new연산자</code>를 통해 각각 다른 2개의 <code class="language-plaintext highlighter-rouge">MemoryMemberRepository</code>가 생성되면서 싱글톤이 깨지는 것 처럼 보이는데, 스프링 컨테이너는 <code class="language-plaintext highlighter-rouge">@Bean</code>이 붙은 메서드를 한 번만 호출해서 등록하고 이를 재사용한다.</p>

<hr />

:ET