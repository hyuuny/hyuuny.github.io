I",<h2 id="제어의-역전inversion-of-control"><span style="color:MediumSeaGreen">제어의 역전(Inversion of Control)</span></h2>
<ul>
  <li>기존 프로그램은 클라이언트 구현 객체가 스스로 필요한 서버 구현 객체를 생성하고, 연결하고, 실행했다. 한마디로 구현 객체가 프로그램의 제어 흐름을 스스로 조종했다.</li>
  <li>AppConfig가 등장한 이후에 구현 객체는 자신의 로직을 실행하는 역할만 담당한다. 프로그램의 제어 흐름은 이제 AppConfig가 가져간다.
    <ul>
      <li>예를 들어서 <code class="language-plaintext highlighter-rouge">OrderServiceImpl</code> 은 필요한 인터페이스들(<code class="language-plaintext highlighter-rouge">repository</code>와 같은)을 호출하지만 어떤 구현 객체들이 실행될지 모른다.</li>
    </ul>
  </li>
  <li>프로그램에 대한 제어 흐름에 대한 권한은 모두 AppConfig가 가지고 있다. 심지어 <code class="language-plaintext highlighter-rouge">OrderServiceImpl</code>도 AppConfig가 생성한다.
    <ul>
      <li>AppConfig는 <code class="language-plaintext highlighter-rouge">OrderServiceImpl</code> 이 아닌 <code class="language-plaintext highlighter-rouge">OrderService</code> 인터페이스의 다른 구현 객체를 생성하고 실행할 수 도 있다.</li>
    </ul>
  </li>
  <li>이렇듯 프로그램의 <strong>제어 흐름을 직접 제어하는 것이 아니라 외부에서 관리하는 것을 제어의 역전(IoC)</strong>이라 한다.<br />
<br /></li>
</ul>
:ET