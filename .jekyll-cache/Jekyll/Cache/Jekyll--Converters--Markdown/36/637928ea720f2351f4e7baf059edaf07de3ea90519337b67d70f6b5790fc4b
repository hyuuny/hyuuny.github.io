I"<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nd">@Configuration</span>
  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppConfig</span> <span class="o">{</span>

      <span class="nd">@Bean</span>
      <span class="kd">public</span> <span class="nc">MemberService</span> <span class="nf">memberService</span><span class="o">()</span> <span class="o">{</span>
          <span class="k">return</span> <span class="k">new</span> <span class="nf">MemberServiceImpl</span><span class="o">(</span><span class="n">memberRepository</span><span class="o">());</span>
      <span class="o">}</span>

      <span class="nd">@Bean</span>
      <span class="kd">public</span> <span class="nc">OrderService</span> <span class="nf">orderService</span><span class="o">()</span> <span class="o">{</span>
          <span class="k">return</span> <span class="k">new</span> <span class="nf">OrderServiceImpl</span><span class="o">(</span><span class="n">memberRepository</span><span class="o">(),</span> <span class="n">discountPolicy</span><span class="o">());</span>
      <span class="o">}</span>

      <span class="nd">@Bean</span>
      <span class="kd">public</span> <span class="nc">MemberRepository</span> <span class="nf">memberRepository</span><span class="o">()</span> <span class="o">{</span>
          <span class="k">return</span> <span class="k">new</span> <span class="nf">MemoryMemberRepository</span><span class="o">();</span>
      <span class="o">}</span>
    <span class="o">...</span> 

<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>memberService 빈을 만드는 코드를 보면 <code class="language-plaintext highlighter-rouge">memberRepository()</code>를 호출한다.</li>
  <li>orderService 빈을 만드는 코드도 동일하게 <code class="language-plaintext highlighter-rouge">memberRepository()</code>를 호출한다.</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">new연산자</code>를 통해 각각 다른 2개의 <code class="language-plaintext highlighter-rouge">MemoryMemberRepository</code>가 생성되면서 싱글톤이 깨지는 것 처럼 보이는데, 스프링 컨테이너는 <code class="language-plaintext highlighter-rouge">@Bean</code>이 붙은 메서드를 한 번만 호출해서 등록하고 이를 재사용한다.</p>

<hr />

<h2 id="configuration과-바이트코드-조작"><span style="color:MediumSeaGreen">@Configuration과 바이트코드 조작</span></h2>
<p>스프링 컨테이너는 싱글톤 레지스트리다. 따라서 스프링 빈이 싱글톤이 되도록 보장해주어야 한다. 그런데 스프링이 자바 코드까지 어떻게 하기는 어렵다. 위 코드를 보면 분명 3번 호출되어야 하는 것이 맞다. 그래서 스프링은 클래스의 바이트코드를 조작하는 라이브러리를 사용한다.<br />
모든 비밀은 <strong>@Configuration 을 적용한 AppConfig</strong>에 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Test</span>
<span class="kt">void</span> <span class="nf">configurationDeep</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">ApplicationContext</span> <span class="n">ac</span> <span class="o">=</span> <span class="k">new</span>
    <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">AppConfig</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

    <span class="c1">//AppConfig도 스프링 빈으로 등록된다.</span>
    <span class="nc">AppConfig</span> <span class="n">bean</span> <span class="o">=</span> <span class="n">ac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">AppConfig</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"bean = "</span> <span class="o">+</span> <span class="n">bean</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span>
    <span class="c1">//출력: bean = class hello.core.AppConfig$$EnhancerBySpringCGLIB$$bd479d70</span>
<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li><code class="language-plaintext highlighter-rouge">AnnotationConfigApplicationContext</code>에 파라미터로 넘긴 값은 스프링 빈으로 등록된다. 그래서 AppConfig도 스프링 빈이 된다.</li>
</ul>

<p>순수한 클래스라면 <strong><code class="language-plaintext highlighter-rouge">class hello.core.AppConfig</code></strong>와 같이 출력되어야 하지만,</p>

<p>AppConfig 스프링 빈을 조회해서 클래스 정보를 출력해보면<br />
<strong><code class="language-plaintext highlighter-rouge">class hello.core.AppConfig$$EnhancerBySpringCGLIB$$bd479d70</code></strong>와 같이 출력된다.</p>

<p>스프링 빈을 조회해서 출력한 클래스 명에 xxxCGLIB가 붙은 것을 확인 할 수 있는데, 이것은 내가 만든 클래스가 아니라 <strong>스프링이 CGLIB라는 바이트코드 조작 라이브러리를 사용해서 AppConfig 클래스를 상속받은 임의의 다른 클래스를 만들고, 이를 스프링 빈으로 등록했기 때문이다.</strong></p>

<p><img src="/assets/images/spring/configuration.png" alt="img.png" /></p>
<ul>
  <li><strong>AppConfig를 상속받은 임의의 클래스가 싱글톤이 보장되도록 해준다.</strong><br />
<br /></li>
</ul>

<p><strong>AppConfig@CGLIB 예상 코드</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">MemberRepository</span> <span class="nf">memberRepository</span><span class="o">()</span> <span class="o">{</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">memoryMemberRepository가</span> <span class="n">이미</span> <span class="n">스프링</span> <span class="n">컨테이너에</span> <span class="n">등록되어</span> <span class="n">있으면</span><span class="o">?)</span> <span class="o">{</span> 
            <span class="k">return</span> <span class="n">스프링</span> <span class="n">컨테이너에서</span> <span class="n">찾아서</span> <span class="n">반환</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span> <span class="c1">//스프링 컨테이너에 없으면</span>
            <span class="n">기존</span> <span class="n">로직을</span> <span class="n">호출해서</span> <span class="nc">MemoryMemberRepository를</span> <span class="n">생성하고</span> <span class="n">스프링</span> <span class="n">컨테이너에</span> <span class="n">등록</span>
            <span class="k">return</span> <span class="n">반환</span>
        <span class="o">}</span> 

<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li>@Bean이 붙은 메서드마다 이미 스프링 빈이 존재하면 존재하는 빈을 반환하고, 스프링 빈이 없으면 생성해서 스프링 빈으로 등록하고 반환하는 코드가 동적으로 만들어진다.
    <ul>
      <li>그로 인해 싱글톤이 보장 됨</li>
    </ul>
  </li>
  <li>AppConfig@CGLIB는 AppConfig의 자식 타입이므로, AppConfig 타입으로 조회 할 수 있다.<br />
<br /></li>
</ul>

<p><strong>@Configuration을 적용하지 않고, @Bean만 적용한 경우</strong></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">@Bean</code>만 사용하면 스프링 빈으로 등록되자만, 매번 객체를 생성한다.(싱글톤을 보장하지 않음)</li>
</ul>
:ET