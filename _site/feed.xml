<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  
  <channel>
    <title> Hyuuny`s Blog  </title>
    <description>배움을 좋아하는 개발자입니다.</description>
    <link>https://hyuuny.github.io/</link>
    <atom:link href="https://hyuuny.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 18 Sep 2021 18:30:46 +0900</pubDate>
    <lastBuildDate>Sat, 18 Sep 2021 18:30:46 +0900</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    
      <item>
        <title>처리장치의 구성요소</title>
        <description>&lt;h2 id=&quot;처리장치의-구성요소&quot;&gt;&lt;span style=&quot;color:MediumSeaGreen&quot;&gt;처리장치의 구성요소&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;처리장치는 여러 가지 마이크로연산을 수행할 수 있도록 레지스터와 ALU(산술/논리연산장치), 레지스터와 ALU는 연결선로인 버스(bus)로 연결된다.&lt;br /&gt;
따라서 &lt;strong&gt;처리장치는 여러 개의 레지스터, ALU, 내부버스로 구성&lt;/strong&gt;된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/computer-structure/InternalComposition.png&quot; alt=&quot;img.png&quot; /&gt;&lt;br /&gt;
위 그림은 처리장치의 내부 구성도로 &lt;strong&gt;레지스터와 ALU, 시프터(shifer), 디지털 논리회로로 구성&lt;/strong&gt;되어 있다.&lt;br /&gt;
&lt;strong&gt;처리장치의 동작원리는&lt;/strong&gt; 우선 하나의 마이크로연산이 실행되기 위해서 지정된 출발 레지스터의 내용이 ALU의 입력으로 전달되고, ALU에서 그 연산을 실행한 후 그 결과가 도착 레지스터에 전송된다. 처리장치에 있는 각 레지스터는 ALU와 연결된 버스를 통해 2개의 멀티플렉서와 연결된다. 각 멀티플렉서는 선택신호를 이용하여 특정 레지스터를 선택한다. 2개의 멀티플렉서에 의해 선택된 데이터는 ALU에 의해 산술 및 논리연산을 실행한다. 즉, ALU에 있는 선택신호에 의해 실행되어야 할 특정 마이크로연산이 선택되는 것이다. ALU에서 실행된 마이크로연산의 결과는 시프트 레지스터를 거치게 된다. 스프트 레지스터에서 선택신호는 특정 마이크로연산을 선택할 수 있게하고, 그 결과는 연결된 버스를 통해 레지스터들의 입력으로 전달된다. 여기서 디코더는 처리장치의 각 레지스터와 연결되어 있으며, 선택신호에 따라 도착 레지스터를 결정하게 된다. 따라서 결정된 도착 레지스터에는 지금까지 수행된 마이크로연산의 결과가 저장된다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이 과정을 요약하면 다음과 같다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;지정된 &lt;strong&gt;출발 레지스터의 내용을 ALU의 입력으로 전달&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;ALU에서 그 &lt;strong&gt;연산을 실행&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;그 결과가 &lt;strong&gt;도착 레지스터에 전송&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;내부버스&quot;&gt;&lt;span style=&quot;color:MediumSeaGreen&quot;&gt;내부버스&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;내부버스란 &lt;strong&gt;중앙처리장치 내부의 연산장치와 레지스터 사이의 정보 전송 경로&lt;/strong&gt;를 말하며, 외부버스는 &lt;strong&gt;중앙처리장치와 중앙처리장치 외부의 장치 사이에 정보를 전송하는 경로&lt;/strong&gt;를 말한다.&lt;br /&gt;
&lt;strong&gt;외부버스는 시스템버스로서, 컴퓨터 시스템의 각 구성요소 간의 통신이 가능하도록 하는 기능&lt;/strong&gt;을 하는데, 주기억장치와 중앙처리장치 사이의 주기억장치버스, 입출력장치와 중앙처리장치 사이의 입출력버스 등이 있다.&lt;br /&gt;
&lt;strong&gt;내부버스는 처리장치 내부에 있는 레지스터 간의 통신이 가능하도록 하는 기능&lt;/strong&gt;을 하는데, 처리장치 내부에 각 레지스터는 그 안에 저장된 정보를 입력버스를 통해 연산장치로 전송하고, 연산장치에서의 연산 결과는 출력버스를 통해 해당 목적지 레지스터로 전송된다. 이러한 내부버스는 멀티플렉서와 디코더를 이용하여 구성하는데, 멀티플렉서는 출발 레지스터를 선택하고, 디코더는 버스로부터 정보를 받아들이는 도착 레지스터를 선택한다.&lt;/p&gt;

&lt;p&gt;내부버스를 구성하는 방법은 멀티플렉서와 디코더를 이용한다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;멀티플렉서는 출발 레지스터&lt;/strong&gt; 선택&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;디코더는 도착 레지스터&lt;/strong&gt; 선택
&lt;img src=&quot;/assets/images/computer-structure/internalBus.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h6 id=&quot;내부버스의-구성-및-동작&quot;&gt;&lt;span style=&quot;color:DodgerBlue&quot;&gt;내부버스의 구성 및 동작&lt;/span&gt;&lt;/h6&gt;
&lt;ul&gt;
  &lt;li&gt;마이크로 연산 : R1 &amp;lt;- R0(R0, R1이 4비트 레지스터인 경우)
    &lt;ul&gt;
      &lt;li&gt;내부버스 구성을 위해 : &lt;strong&gt;2x1 MUX 4개, 1x2 디코더 1개&lt;/strong&gt; 필요&lt;/li&gt;
      &lt;li&gt;마이크로 연산을 위해 : MUX의 선택신호 0(2진수), 디코더의 선택신호는 1(2진수) 부여
&lt;img src=&quot;/assets/images/computer-structure/internalBus2.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;span style=&quot;color:DarkOrange&quot;&gt;reference&lt;/span&gt;&lt;br /&gt;
김형근·손진곤 (공저). (2021). 컴퓨터구조. 한국방송통신대학교출판문화원&lt;/p&gt;
</description>
        <pubDate>Sat, 18 Sep 2021 00:00:00 +0900</pubDate>
        <link>https://hyuuny.github.io/computer%20science/%EC%B2%98%EB%A6%AC%EC%9E%A5%EC%B9%98%EC%9D%98-%EA%B5%AC%EC%84%B1%EC%9A%94%EC%86%8C/</link>
        <guid isPermaLink="true">https://hyuuny.github.io/computer%20science/%EC%B2%98%EB%A6%AC%EC%9E%A5%EC%B9%98%EC%9D%98-%EA%B5%AC%EC%84%B1%EC%9A%94%EC%86%8C/</guid>
        
        <category>2021년 09월</category>
        
        
        <category>Computer Science</category>
        
      </item>
    
      <item>
        <title>상태 레지스터와 시프터</title>
        <description>&lt;h2 id=&quot;상태-레지스터&quot;&gt;&lt;span style=&quot;color:MediumSeaGreen&quot;&gt;상태 레지스터&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;상태 레지스터는 &lt;strong&gt;ALU에서 산술연산을 수행한 후 연산 결과에 의해 상태 레지스터를 세트&lt;/strong&gt;한다. 
상태 레지스터들은 &lt;strong&gt;C(carry bit)&lt;/strong&gt;, &lt;strong&gt;S(sign bit)&lt;/strong&gt;, &lt;strong&gt;Z(zero bit)&lt;/strong&gt;, &lt;strong&gt;V(overflow bit)&lt;/strong&gt;로 구성되어 있으며, &lt;strong&gt;1개 상태가 1개 비트씩 기억될 수 있도록 비트 단위로 구성&lt;/strong&gt;되어 있다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;ALU에서 &lt;strong&gt;산술연산이 수행된 후 연산결과에 의해 나타나는 상태값을 저장&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;상태 레지스터는 C(carry bit), S(sign bit), Z(zero bit), V(overflow bit)로 구성
&lt;img src=&quot;/assets/images/computer-structure/flagRegister.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;span style=&quot;color:DodgerBlue&quot;&gt;캐리비트(carry bit)&lt;/span&gt;&lt;br /&gt;
캐리비트는 &lt;strong&gt;두 수를 가산하여 캐리가 발생하면 비트가 1로 세트되고, 아니면 0&lt;/strong&gt;이된다. 따라서 캐리비트는 산술연산장치의 최상위 비트의 전가산기 캐리 아웃(carry out) 신호를 받아서 세트된다. 또한 감산에서 자리내림(borrow)이 발생했을 때도 1로 세트된다.&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color:DodgerBlue&quot;&gt;부호비트(sign bit)&lt;/span&gt;&lt;br /&gt;
부호비트는 산술연산장치의 출력 최상위 비트와 연결되어 있으며, &lt;strong&gt;최상위 비트가 0이면 양수를 나타내고, 1이면 음수&lt;/strong&gt;를 나타낸다.&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color:DodgerBlue&quot;&gt;제로비트(zero bit)&lt;/span&gt;&lt;br /&gt;
제로비트는 &lt;strong&gt;두 수를 연산한 후 결과값이 0이며 1로 세트&lt;/strong&gt;된다. 따라서 산술연산장치의 출력비트들을 논리게이트 NOR에 연결하여 모든 비트가 0이면 출력밧이 1이 되도록 구성한다.&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color:DodgerBlue&quot;&gt;오버플로 비트(overflow bit)&lt;/span&gt;&lt;br /&gt;
오버플로는 산술연산에서 &lt;strong&gt;두 수를 가산할 때 결과를 저장할 수 있는 레지스터의 자릿수가 모자라는 경우에 발생&lt;/strong&gt;하는 에러로서, 오버플로가 발생하면 오버플로 비트가 1로 세트된다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;시프터shifter&quot;&gt;&lt;span style=&quot;color:MediumSeaGreen&quot;&gt;시프터(shifter)&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;ALU에는 데이터를 비트 단위로 이동시키는 시프트(shift) 기능이 없다. 따라서 &lt;strong&gt;ALU 출력 단에 시프터(shifter)를 연결하여 시프터 연산을 수행&lt;/strong&gt;한다. 시프트 연산은 입력 데이터의 모든 비트를 각각 서로 이웃한 비트로 자리를 옮기는 연산을 말하여, 왼쪽 시프트와 오른쪽 시프트가 있다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;입력 데이터의 모든 비트들을 각각 서로 이웃한 비트로 자리를 옮기는 시프트 연산을 수행
&lt;img src=&quot;/assets/images/computer-structure/shifter.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;시프터에 대한 연산표는 다음과 같다.
&lt;img src=&quot;/assets/images/computer-structure/shifter2.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;span style=&quot;color:DarkOrange&quot;&gt;reference&lt;/span&gt;&lt;br /&gt;
김형근·손진곤 (공저). (2021). 컴퓨터구조. 한국방송통신대학교출판문화원&lt;/p&gt;
</description>
        <pubDate>Sat, 18 Sep 2021 00:00:00 +0900</pubDate>
        <link>https://hyuuny.github.io/computer%20science/%EC%83%81%ED%83%9C%EB%A0%88%EC%A7%80%EC%8A%A4%ED%84%B0%EC%99%80%EC%8B%9C%ED%94%84%ED%84%B0/</link>
        <guid isPermaLink="true">https://hyuuny.github.io/computer%20science/%EC%83%81%ED%83%9C%EB%A0%88%EC%A7%80%EC%8A%A4%ED%84%B0%EC%99%80%EC%8B%9C%ED%94%84%ED%84%B0/</guid>
        
        <category>2021년 09월</category>
        
        
        <category>Computer Science</category>
        
      </item>
    
      <item>
        <title>산술/논리연산장치</title>
        <description>&lt;h2 id=&quot;산술논리연산장치&quot;&gt;&lt;span style=&quot;color:MediumSeaGreen&quot;&gt;산술/논리연산장치&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;ALU는 &lt;strong&gt;기본적인 산술연산과 논리연산을 실행하는 조합논리회로&lt;/strong&gt;다. ALU에는 특정한 연산을 선택하기 위하여 몇 개의 선택입력선이 주어진다. 선택입력선은 ALU 내에서 디코드되는데, k개의 선택입력으로 최대 2^k에 해당하는 서로 다른 연산을 표시할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/computer-structure/ALU.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;또한, &lt;strong&gt;산술연산회로와 논리연산회로를 결합하여 하나의 ALU&lt;/strong&gt;를 만들어 낼 수 있다.
&lt;img src=&quot;/assets/images/computer-structure/ALU6.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ALU에 대한 연산표는 다음과 같다.
&lt;img src=&quot;/assets/images/computer-structure/ALU7.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h6 id=&quot;산술연산회로&quot;&gt;&lt;span style=&quot;color:DodgerBlue&quot;&gt;산술연산회로&lt;/span&gt;&lt;/h6&gt;
&lt;p&gt;산술연산회로의 가장 기본적인 구성요소는 &lt;strong&gt;병렬가산기이며, 여러개의 전가산기 회로를 연속적으로 연결&lt;/strong&gt;시켜 만든다. 병렬가산기로 들어가는 제어입력값을 선액하면 여러 가지 형태의 산술연산을 실행할 수 있다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;여러 개의 전가산기(FA)를 연속적으로 연결한 병렬가산기로 구성&lt;/li&gt;
  &lt;li&gt;병렬가산기로 들어가는 제어입력 값을 선택하여 여러 가지 형태의 산술연산을 실행&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/computer-structure/ALU2.png&quot; alt=&quot;img.png&quot; /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;산술연산회로에 대한 연산표는 다음과 같다.
&lt;img src=&quot;/assets/images/computer-structure/ALU3.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h6 id=&quot;논리연산회로&quot;&gt;&lt;span style=&quot;color:DodgerBlue&quot;&gt;논리연산회로&lt;/span&gt;&lt;/h6&gt;
&lt;p&gt;논리연산은 &lt;strong&gt;레지스터에 있는 각 비트를 독립된 2진 변수로 간주하여 비트별 연산을 실행&lt;/strong&gt;한다. 논리연산에는 &lt;strong&gt;AND&lt;/strong&gt;, &lt;strong&gt;OR&lt;/strong&gt;, &lt;strong&gt;XOR&lt;/strong&gt;, &lt;strong&gt;NOT&lt;/strong&gt; 등이 있고 이를 이용하여 복잡한 연산을 유도할 수 있다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;레지스터에 있는 각 비트를 독립된 2진 변수로 간주하여 비트별 연산 실행&lt;/li&gt;
  &lt;li&gt;AND, OR, XOR, NOT 연산 등이 있으며, 이를 이용하여 복잡한 연산을 유도&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/computer-structure/ALU4.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;논리연산회로에 대한 연산표는 다음과 같다.
&lt;img src=&quot;/assets/images/computer-structure/ALU5.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;span style=&quot;color:DarkOrange&quot;&gt;reference&lt;/span&gt;&lt;br /&gt;
김형근·손진곤 (공저). (2021). 컴퓨터구조. 한국방송통신대학교출판문화원&lt;/p&gt;
</description>
        <pubDate>Sat, 18 Sep 2021 00:00:00 +0900</pubDate>
        <link>https://hyuuny.github.io/computer%20science/%EC%82%B0%EC%88%A0%EB%85%BC%EB%A6%AC%EC%97%B0%EC%82%B0%EC%9E%A5%EC%B9%98/</link>
        <guid isPermaLink="true">https://hyuuny.github.io/computer%20science/%EC%82%B0%EC%88%A0%EB%85%BC%EB%A6%AC%EC%97%B0%EC%82%B0%EC%9E%A5%EC%B9%98/</guid>
        
        <category>2021년 09월</category>
        
        
        <category>Computer Science</category>
        
      </item>
    
      <item>
        <title>주소지정방식</title>
        <description>&lt;h2 id=&quot;주소지정방식&quot;&gt;&lt;span style=&quot;color:MediumSeaGreen&quot;&gt;주소지정방식&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;명령어 내의 연산코드 필드는 수행할명령어의 종류를 지정하고, 컴퓨터 레지스터나 기억장치에 저장되어 있는 항목을 대상으로 수행된다. 프로그램 수행 시 오퍼랜드를 지정하는 방법은 명령어 내에 있는 주소지정방식에 의해 결정된다. &lt;strong&gt;주소지정방식(addressing mode)이란, 오퍼랜드를 실제로 참조하기 전에 명령어의 오퍼랜드를 변경하거나 해석하는 규칙을 지정하는 형식이다.&lt;/strong&gt;&lt;br /&gt;
이러한 규칙을 적용하여 만들어진 오퍼랜드 주소를 &lt;strong&gt;유효주소(effective address)&lt;/strong&gt;라고 한다.&lt;br /&gt;
명령어의 주소지정방식은 컴퓨터에 따라 별도의 2진 코드로 정의되기도 하고, 연산방식과 공통으로 사용하는 2진 코드로 정의되기도 한다. 연산코드 필드는 수행할 연산의 종류를 지정하며, 주소지정방식 필드는 연산에 필요한 오퍼랜드의 주소를 알아내는 데 사용된다. 주소 필드는 존재할 수도 있고 안 할수도 있는데, 주소 필드가 존재한다면 그 필드는 기억장치주소 혹은 레지스터 주소를 나타낸다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;프로그램 수행시 오퍼랜드를 지정하는 방식&lt;/li&gt;
  &lt;li&gt;명령어의 주소 필드를 변경하거나 해석하는 규칙을 지정하는 형식&lt;/li&gt;
  &lt;li&gt;주소지정방식을 사용하면 &lt;strong&gt;명령어의 수를 줄일 수 있는&lt;/strong&gt; 효과적인 프로그래밍 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/computer-structure/addressingMode.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h6 id=&quot;의미주소지정implied-mode&quot;&gt;&lt;span style=&quot;color:DodgerBlue&quot;&gt;의미주소지정(implied mode)&lt;/span&gt;&lt;/h6&gt;
&lt;p&gt;대부분의 주소지정방식은 명령어에서 주소 필드를 표현하지만, &lt;strong&gt;주소 필드가 필요 없는 방식이 하나 있는데 이 방식을 의미방식(implied mode)&lt;/strong&gt;이라고 한다.&lt;br /&gt;
이 방식에서는 &lt;strong&gt;연산코드 필드에 지정된 묵시적인 의미의 오퍼랜드를 지정&lt;/strong&gt;한다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;명령어 형식에서 주소 필드를 필요로 하지 않는 방식&lt;/li&gt;
  &lt;li&gt;연산코드 필드에 지정된 묵시적 의미의 오퍼랜드를 지정&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/computer-structure/impliedMode.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;기억장치 스택에서 ADD와 같은 명령어는 스택의 맨 위 항목과 그 아래 항목을 더하여 스택의 맨위에 저장하는 명령어로서, &lt;strong&gt;오퍼랜드가 스택의 맨 위에 있다는 것을 묵시적으로 가정&lt;/strong&gt;함&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h6 id=&quot;즉치주소지정immediate-mode&quot;&gt;&lt;span style=&quot;color:DodgerBlue&quot;&gt;즉치주소지정(immediate mode)&lt;/span&gt;&lt;/h6&gt;
&lt;p&gt;즉치방식(immediate mode)에서는 &lt;strong&gt;오퍼랜드를 명령어 자체 내에서 지정&lt;/strong&gt;하고 있다. 즉, 명령어의 오퍼랜드 필드에 저장된 내용이 명령어에서 사용될 실제 데이터라는 것이다.&lt;br /&gt;
이 방식은 주로 프로그램에서 &lt;strong&gt;레지스터나 변수의 초깃값을 특정 상숫값으로 초기화하는데 매우 유용&lt;/strong&gt;하다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;명령어 자체 내에 오퍼랜드를 지정하고 있는 방식&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;오퍼랜드 필드의 내용이 실제 사용될 데이터&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;레지스터나 변수의 초기화에 유용&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/computer-structure/immediateMode.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h6 id=&quot;직접주소지정direct-addressing-mode&quot;&gt;&lt;span style=&quot;color:DodgerBlue&quot;&gt;직접주소지정(direct-addressing mode)&lt;/span&gt;&lt;/h6&gt;
&lt;p&gt;직접주소지정방식(direct-addressing mode)은 &lt;strong&gt;명령어의 주소 필드에 직접 오퍼랜드의 주소를 지정하는 방식&lt;/strong&gt;이다.&lt;br /&gt;
이 방식은 명령어의 대상이 되는 데이터에 접근되는 데 기억장치를 한 번만 접근하면 되는 장점이 있으나, 오퍼랜드 필드 길이에 따라 접근할 수 있는 기억장치의 주소공간에 한계가 있다는 단점이 있다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;명령어의 주소필드에 &lt;strong&gt;직접 오퍼랜드의 주소를 저장&lt;/strong&gt;시키는 방식&lt;/li&gt;
  &lt;li&gt;기억장치에의 접근이 한번에 이루어짐&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/computer-structure/directAddressingMode.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h6 id=&quot;간접주소지정indirect-addressing-mode&quot;&gt;&lt;span style=&quot;color:DodgerBlue&quot;&gt;간접주소지정(indirect-addressing mode)&lt;/span&gt;&lt;/h6&gt;
&lt;p&gt;간접주소지정방식(indirect-addressing mode)은 &lt;strong&gt;명령어의 주소 필드에 유효주소가 저장되어 있는 기억장치주소를 기억시키는 방식&lt;/strong&gt;으로, 제어는 기억장치로부터 명령어를 가져온 후 주소 부분을 이용하여 다시 기억장치에 접근하여 유효 주소를 읽어낸다.&lt;br /&gt;
간접주소지정방식은 접근할 수 있는 기억장치 주소공간이 중앙처리장치가 한 번에 접근할 수 있는 단어의 길이로 결정되는 장점이 있으나, 실행 사이클 동안 두 번의 기억장치 접근이 필요하다는 단점이 있다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;명령어의 주소필드에 유효주소가 저장되어있는 기억장치 주소를 기억시키는 방식&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/computer-structure/indirectAddressingMode.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h6 id=&quot;레지스터-주소지정register-addressing-mode&quot;&gt;&lt;span style=&quot;color:DodgerBlue&quot;&gt;레지스터 주소지정(register-addressing mode)&lt;/span&gt;&lt;/h6&gt;
&lt;p&gt;레지스터 주소지정방식(register addressing mode)은 &lt;strong&gt;오퍼랜드 필드에서 지정한 레지스터에 실제 피연산자가 들어있는 것&lt;/strong&gt;이다. 따라서 오퍼랜드에는 레지스터 번호가 저장되며 유효주소는 존재하지 않는다.&lt;br /&gt;
이 방식은 오퍼랜드 필드가 레지스터들의 번호를 나타내기 때문에 오퍼랜드 필드의 비트가 적어도 되고, 데이터 인출을 위해 기억장치에 접근하지 않고 중앙처리장치의 레지스터로 접근하므로 속도가 빠르다는 장점이 있으나, 오퍼랜드가 중앙처리장치의 레지스터 수로 제한되어 있으므로 무한정 사용할 수 없다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;오퍼랜드 필드에 레지스터가 기억되는 방식&lt;/li&gt;
  &lt;li&gt;레지스터에 오퍼랜드가 들어있음(&lt;strong&gt;유효주소가 없음&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/computer-structure/registerMode.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h6 id=&quot;레지스터-간접주소지정register-indirect-mode&quot;&gt;&lt;span style=&quot;color:DodgerBlue&quot;&gt;레지스터 간접주소지정(register-indirect mode)&lt;/span&gt;&lt;/h6&gt;
&lt;p&gt;레지스터 간접주소지정방식(register-indirect mode)에서는 &lt;strong&gt;명령어 내의 주소 필드가 레지스터 중 하나를 지정하고, 지정된 레지스터의 내용은 실제 오퍼랜드가 저장된 기억장치주소를 지정&lt;/strong&gt;한다. 즉, 지정된 레지스터는 오퍼랜드 그 자체가 아니라 &lt;strong&gt;오퍼랜드가 저장된 기억장치주소를 가지고 있는 것&lt;/strong&gt;이다. 따라서 레지스터 간접주소지정방식에서 유효주소는 지정된 레지스터에 있는 주소가 된다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;레지스터가 &lt;strong&gt;실제 오퍼랜드가 저장된 기억장치의 주소 값을 갖고 있는&lt;/strong&gt; 방식&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/computer-structure/registerIndirectMode.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h6 id=&quot;상대주소지정relative-addressing-mode&quot;&gt;&lt;span style=&quot;color:DodgerBlue&quot;&gt;상대주소지정(relative-addressing mode)&lt;/span&gt;&lt;/h6&gt;
&lt;p&gt;상대주소지정방식(relative-addressing mode)은 &lt;strong&gt;유효주소를 계산하기 위해 처리장치 내에 있는 특정 레지스터의 내용에 명령어 오퍼랜드값을 더하는 방식&lt;/strong&gt;이다.&lt;br /&gt;
자주 사용되는 레지스터는 PC로서 상대주소지정방식에서 유효주소는 &lt;strong&gt;유효주소=명령어 주소 부분의 내용 + PC의 내용&lt;/strong&gt;과 같이 계산된다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;유효주소를 계산하기 위해 처리장치 내에 있는 특정 레지스터의 내용에 명령어 주소필드 값을 더하는 방식&lt;/li&gt;
  &lt;li&gt;특정 레지스터로 프로그램카운터(PC)가 주로 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/computer-structure/relativeAddressingMode.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h6 id=&quot;인덱스된-주소지정indexed-addressing-mode&quot;&gt;&lt;span style=&quot;color:DodgerBlue&quot;&gt;인덱스된 주소지정(indexed-addressing mode)&lt;/span&gt;&lt;/h6&gt;
&lt;p&gt;인덱스된 주소지정방식(indexed-addressing mode)에서는 인덱스 레지스터의 내용을 &lt;strong&gt;명령어 주소 부분에 더해서&lt;/strong&gt; 유효주소를 얻는다. 인덱스 레지스터는 특정한 CPU 레지스터나 레지스터 파일에 있는 레지스터가 될 수 있다.&lt;br /&gt;
인덱스된 주소지정방식은 주로 배열을 인덱싱(indexing)할 때 많이 사용되며, 유효주소는 &lt;strong&gt;유효주소=명령어 주소 부분의 내용 + 인덱스 레지스터의 내용&lt;/strong&gt;과 같이 계산된다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;인덱스 레지스터의 내용을 명령어 주소 부분에 더해서 유효주소를 얻는 방식&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/computer-structure/indexedAddressingMode.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h6 id=&quot;주소지정방식-요약summary&quot;&gt;&lt;span style=&quot;color:DodgerBlue&quot;&gt;주소지정방식 요약(Summary)&lt;/span&gt;&lt;/h6&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/computer-structure/Summary1.png&quot; alt=&quot;img.png&quot; /&gt;
&lt;img src=&quot;/assets/images/computer-structure/Summary2.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;span style=&quot;color:DarkOrange&quot;&gt;reference&lt;/span&gt;&lt;br /&gt;
김형근·손진곤 (공저). (2021). 컴퓨터구조. 한국방송통신대학교출판문화원&lt;/p&gt;
</description>
        <pubDate>Sun, 12 Sep 2021 00:00:00 +0900</pubDate>
        <link>https://hyuuny.github.io/computer%20science/%EC%A3%BC%EC%86%8C%EC%A7%80%EC%A0%95%EB%B0%A9%EC%8B%9D/</link>
        <guid isPermaLink="true">https://hyuuny.github.io/computer%20science/%EC%A3%BC%EC%86%8C%EC%A7%80%EC%A0%95%EB%B0%A9%EC%8B%9D/</guid>
        
        <category>2021년 09월</category>
        
        
        <category>Computer Science</category>
        
      </item>
    
      <item>
        <title>WebAsyncManagerIntegrationFilter</title>
        <description>&lt;h2 id=&quot;webasyncmanagerintegrationfilter&quot;&gt;&lt;span style=&quot;color:MediumSeaGreen&quot;&gt;WebAsyncManagerIntegrationFilter&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;WebAsyncManagerIntegrationFilter는 스프링 MVC의 &lt;strong&gt;Async 기능(핸들러에서 Callable을 리턴할 수 있는 기능)을 사용할 때에도 SecurityContext를 공유&lt;/strong&gt;하도록 도와주는 필터.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/async-handler&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@ResponseBody&lt;/span&gt; 
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Callable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;asyncHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;SecurityLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MVC&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// thread = http-nio-8080-exec-5&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;SecurityLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Callable&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// thread = tesk-1&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Async Handler&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;// logger &lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;thread = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;principal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SecurityContextHolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAuthentication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPrincipal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;principal = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;principal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/spring-security/async-img.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Async 기능을 사용할 때, 서로 다른 쓰레드이지만 &lt;strong&gt;SecurityContext를 공유하기 때문에 동일한 Principal을 참조&lt;/strong&gt;한 것을 확인할 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PresProcess : 새로 만든 Thread에 Integration해준다.&lt;/li&gt;
  &lt;li&gt;Callable : &lt;strong&gt;Callable안에서는 Thread가 달라도 동일한 SecurityContext를 참조&lt;/strong&gt;할 수 있다.&lt;/li&gt;
  &lt;li&gt;PostProcess : SecurityContext의 요청을 마친 뒤, Clean Up 작업을 한다.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 07 Sep 2021 00:00:00 +0900</pubDate>
        <link>https://hyuuny.github.io/spring%20security/WebAsyncManagerIntegrationFilter/</link>
        <guid isPermaLink="true">https://hyuuny.github.io/spring%20security/WebAsyncManagerIntegrationFilter/</guid>
        
        <category>2021년 09월</category>
        
        
        <category>Spring Security</category>
        
      </item>
    
      <item>
        <title>ignoring()</title>
        <description>&lt;h2 id=&quot;ignoring&quot;&gt;&lt;span style=&quot;color:MediumSeaGreen&quot;&gt;ignoring&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;WebSecurity의 &lt;strong&gt;ignoring()을 사용해서 요청(request)시 시큐리티 필터 적용을 제외하도록 설정할 수 있다.&lt;/strong&gt;&lt;br /&gt;
스프링 부트가 제공하는 PathRequest를 사용하면 정적(static) 자원 요청에 대하여 스프링 시큐리티 필터가 적용되지 않도록 설정할 수 있는데, 이경우 FilterChain을 거치지 않는다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;WebSecurity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ignoring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;requestMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PathRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toStaticResources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;atCommonLocations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;또-다른-설정방법&quot;&gt;&lt;span style=&quot;color:MediumSeaGreen&quot;&gt;또 다른 설정방법&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;이와 같이 하나에 설정할수도 있지만, &lt;strong&gt;FilterChain 15개를 거치게 되므로, 리소스 낭비가 발생&lt;/strong&gt;하게 된다.(권장 X)&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpSecurity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;authorizeRequests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;antMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/info&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/account/**&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;permitAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 누구나 접근 가능&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mvcMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/admin&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasRole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ADMIN&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// hasRole로 접근 가능한 권한 부여&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mvcMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/user&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasRole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;USER&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;requestMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PathRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toStaticResources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;atCommonLocations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;permitAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;anyRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;authenticated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// anyRequest().authenticated() &amp;lt;- 그 외 인증만 하면 접근 가능&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;expressionHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expressionHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;formLogin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;httpBasic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/spring-security/ignoring-img.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;결론&quot;&gt;&lt;span style=&quot;color:MediumSeaGreen&quot;&gt;결론&lt;/span&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;정적 리소스는 WebSecurity.ignoring()를 권장&lt;/strong&gt;하며,
&lt;strong&gt;예외적인 정적 자원 (인증이 필요한 정적자원이 있는 경우)는 http.authorizeRequests() 사용&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;WebSecurity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ignoring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;requestMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PathRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toStaticResources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;atCommonLocations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;동적 리소스는 http.authorizeRequests()에서 처리&lt;/strong&gt;하는 것을 권장&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpSecurity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;authorizeRequests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;antMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/info&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/account/**&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;permitAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 누구나 접근 가능&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mvcMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/admin&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasRole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ADMIN&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// hasRole로 접근 가능한 권한 부여&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mvcMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/user&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasRole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;USER&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;requestMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PathRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toStaticResources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;atCommonLocations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;permitAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;anyRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;authenticated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// anyRequest().authenticated() &amp;lt;- 그 외 인증만 하면 접근 가능&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;expressionHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expressionHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;formLogin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;httpBasic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 06 Sep 2021 00:00:00 +0900</pubDate>
        <link>https://hyuuny.github.io/spring%20security/ignoring/</link>
        <guid isPermaLink="true">https://hyuuny.github.io/spring%20security/ignoring/</guid>
        
        <category>2021년 09월</category>
        
        
        <category>Spring Security</category>
        
      </item>
    
      <item>
        <title>컴퓨터 구조</title>
        <description>&lt;h2 id=&quot;컴퓨터-시스템&quot;&gt;&lt;span style=&quot;color:MediumSeaGreen&quot;&gt;컴퓨터 시스템&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;우리는 일반적으로 컴퓨터를 말할 때, “시스템”이란 용어를 덧 붙여서 “컴퓨터 시스템”이라고 부른다. 시스템이란 그 시스템에 부여된 목적을 달성하기 위하여 상호작용하는 구성요소들의 집합으로 정의된다.&lt;br /&gt;
이러한 &lt;strong&gt;컴퓨터 시스템의 원리는 인체와 비슷하다.&lt;/strong&gt; 인체는 눈, 귀, 피부, 혀, 코와 같은 감각기관을 통해 데이터를 받아들이고, 수집된 데이터는 뇌에 전달된다. 신경망은 뇌에 저장된 데이터를 이용하여 수집된 데이터를 처리하고, 처리 결과는 근육의 움직임 또는 음성 등으로 나타난다. 아울러 처리로 얻은 데이터가 새로운 것인 경우에는 새로운 지식으로 뇌에 저장된 후 다음에 사용될 수 있다.&lt;br /&gt;
&lt;br /&gt;
이와 같이 인체의 수행기능을 기계적으로 구현하기 위해 컴퓨터 시스템은 &lt;strong&gt;기억장치(memory)&lt;/strong&gt;, &lt;strong&gt;중앙처리장치(CPU:Central Processing Unit)&lt;/strong&gt;, &lt;strong&gt;입력장치(input device)&lt;/strong&gt;, &lt;strong&gt;출력장치(output device)&lt;/strong&gt;로 구성된다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;입력장치input-device&quot;&gt;&lt;span style=&quot;color:MediumSeaGreen&quot;&gt;입력장치(input device)&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;입력장치란 &lt;strong&gt;사용자가 입력하는 데이터와 명령어를 받아들여 컴퓨터가 알 수 있는 형태로 변환하여 기억장치나 중앙처리장치에 전달해주는 장치&lt;/strong&gt;다.&lt;br /&gt;
초창기 컴퓨터는 천공카드나 천공테이프를 이용하여 데이터와 명령어를 입력받았는데, 이러한 입력장치들은 카드나 종이테이프에 구멍이 몇 개 있고, 어느 위치에 구멍이 뚫렸는가를 해독하여 이를 전기적 신호로 변환하여 컴퓨터에게 전달하였다.&lt;br /&gt;
현재는 키보드상의 문자 각각에 해당하는 키를 누르면 이에 대응하는 전기적 신호가 컴퓨터로 전달된다. 이밖에도 그림과 같은 데이터를 입력하기 위한 스캐너(scanner), 음성신호가 입력될 수 있도록 변환해주는 마이크(mike), 화면상의 커서를 이동시키고 화면의 특정 부분을 선택할 수 있도록 하는 마우스(mouse) 등이 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;출력장치output-device&quot;&gt;&lt;span style=&quot;color:MediumSeaGreen&quot;&gt;출력장치(output device)&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;출력장치란 &lt;strong&gt;입력장치로부터 데이터와 명령어를 받아들여 그 명령대로 데이터를 처리하고 이에 대한 결과를 사람이 알아볼 수 있는 형태로 변환해주는 장치&lt;/strong&gt;다.&lt;br /&gt;
초창기에는 컴퓨터의 출력 결과를 종이에 인쇄해주는 프린터를 사용하다가 그림, 문자 등 컴퓨터에서 처리한 결과를 화면에 표시해주는 모니터가 주요 출력장치가 되었다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;기억장치memory&quot;&gt;&lt;span style=&quot;color:MediumSeaGreen&quot;&gt;기억장치(memory)&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;데이터 저장 역할을 하는 기억장치는 &lt;strong&gt;특성과 역할에 따라 캐시, 주기억장치, 보조기억장치로 나뉘게 되는데&lt;/strong&gt;, 입력장치로부터 컴퓨터 내부로 전달되는 모든 데이터는 &lt;strong&gt;2진수로 바뀌어 기억장치에 저장&lt;/strong&gt;된다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color:DodgerBlue&quot;&gt;&lt;strong&gt;주기억장치&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;
 주기억장치는 컴퓨터에서 중앙처리장치가 처리할 데이터와 명령어들을 저장하며, 대표적으로 RAM(Random Access Memory)과 ROM(Read Only Memory)이 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;RAM&lt;/strong&gt;은 전원이 공급되는 동안에는 데이터를 계속 기억하고 있으나, 전원 공급이 끊기면 기억된 내용이 없어지는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;휘발성 기억장치&lt;/code&gt;이다.&lt;/li&gt;
  &lt;li&gt;RAM은 SRAM(Static Ram)과 DRAM(Dynamic Ram)으로 구분된다.
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;SRAM&lt;/strong&gt;은 기억소자에 정보가 저장되면 전원이 유지되는 한 그 데이터를 상실하지 않는다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;DRAM&lt;/strong&gt;은 전원이 공급되는 동안에도 일정 주기로 충전해 주어야 데이터를 상실하지 않는 특징으로 DRAM을 채용한 컴퓨터 시스템에서는 재충전이 필요한 하드웨어 회로에 포함된다.&lt;/li&gt;
      &lt;li&gt;주기억장치는 특수한 경우를 제외하면 &lt;strong&gt;대부분 가격이 저렴한 DRAM으로 구성&lt;/strong&gt;되는데, DRAM은 데이터를 처리하는 &lt;strong&gt;중앙처리장치에 비해 속도가 매우 느리므로&lt;/strong&gt;, 중앙처리 장치가 주기억장치에서 데이터를 가져올 때 &lt;strong&gt;시간이 많이 낭비&lt;/strong&gt;된다.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ROM&lt;/strong&gt;은 전원 공급이 끊겨도 이전의 정보가 계속 기억되는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;비휘발성 기억장치&lt;/code&gt;이다.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;span style=&quot;color:DodgerBlue&quot;&gt;&lt;strong&gt;캐시&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;
 주기억장치의 단점을 해결하기 위해, 데이터가 중앙처리장치에 신속하게 전달될 수 있도록 하기 위해 자주 사용되는 &lt;strong&gt;주기억장치와 중앙처리장치 사이에 위치한 기억장치를 캐시(cache)&lt;/strong&gt;라고 한다. 캐시는 일반적으로 가격이 비싸고 부피가 큰 대신 매우 빠른 SRAM(static Random Access Memory)으로 구성되며, 보통 수백 MB의 용량을 갖는다.&lt;br /&gt;
 &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color:DodgerBlue&quot;&gt;&lt;strong&gt;보조기억장치&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;
캐시나 주기억장치는 전원이 꺼지면 그 내용을 잃어버린다.&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(흔히 날아갔다고 표현)&lt;/code&gt; 그러나, 보조기억장치는 컴퓨터 사용자가 현재 기억장치에 저장한 내용을 전원을 끈 다음에도 사용할 수 있도록 해준다. 일반적으로 &lt;strong&gt;보조기억장치는 대량의 데이터를 저장하기 위해 사용&lt;/strong&gt;된다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;보조기억장치에는 자기디스크, 자기테이프, SSD, USB 메모리, 광학디스크 등이 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;중앙처리장치cpucentral-processing-unit&quot;&gt;&lt;span style=&quot;color:MediumSeaGreen&quot;&gt;중앙처리장치(CPU:Central Processing Unit)&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;중앙처리장치는 컴퓨터의 두뇌에 해당하는 부분으로, 다음 두 가지의 일을 한다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;연산을 수행&lt;/strong&gt;한다.&lt;/li&gt;
  &lt;li&gt;컴퓨터의 각 요소들을 &lt;strong&gt;순서에 맞추어 작동시키는 제어작용을 수행&lt;/strong&gt;한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;컴퓨터 구조에서 첫 번째 역할을 담당하는 요소는 산술/논리 연산장치(ALU:Arithmetic Logic Unit)이고, 두 번째 역할을 담당하는 요소는 제어장치(control unit)이다. 데이터의 저장장소 역할을 하는 레지스터(register)도 중앙처리장치에 포함된다.&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color:DodgerBlue&quot;&gt;&lt;strong&gt;산술/논리 연산장치&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;
산술/논리 연산장치는 중앙처리장치의 가장 중요한 요소로서 &lt;strong&gt;사칙연산을 포함한 산술연산과 참과 거짓을 판별하는 논리연산을 수행&lt;/strong&gt;하는 장치다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color:DodgerBlue&quot;&gt;&lt;strong&gt;제어장치&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;
제어장치는 중앙처리장치 내부에서 일어나는 &lt;strong&gt;모든 동작을 제어하고 관리&lt;/strong&gt;하는 장치다. 기억장치로부터 명령을 읽고 해석된 결과에 따라 명령을 수행하기 위한 제어 신호를 만드는 장치다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color:DodgerBlue&quot;&gt;&lt;strong&gt;레지스터&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;
레지스터는 중앙처리장치에 있는 내부기억장치로서 &lt;strong&gt;연산처리를 위한 데이터나 결과 등을 일시적으로 보관&lt;/strong&gt;해 두는 장치다. 고속의 연산처리나 편리한 프로그래밍에 도움을 주지만, &lt;strong&gt;가격이 비싸므로 중앙처리장치 내의 레지스터의 수는 제한적&lt;/strong&gt;이다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;시스템-버스&quot;&gt;&lt;span style=&quot;color:MediumSeaGreen&quot;&gt;시스템 버스&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;컴퓨터 구조에서 &lt;strong&gt;버스란 2개 이상의 장치를 연결해주는 통신선로&lt;/strong&gt;를 말한다. 버스의 특징은 여러 장치가 동시에 데이터를 전송하고자 할 때, `한번에 하나의 장치만 데이터를 전송할 수 있다는 것이다. &lt;strong&gt;일반적으로 하나의 버스는 여러개의 통신선으로 구성되어 있고, 각 선은 2진수 ‘0’과 ‘1’로 표현되는 신호들을 전송&lt;/strong&gt;할 수 있다. 따라서 한 버스가 8개의 선으로 구성된 경우에는 8개의 신호를 동시에 전송할 수 있다.&lt;br /&gt;
컴퓨터 시스템은 다양한 시스템 계층에서의 구성요소들 간에 통신을 가능하게 하는 많은 컴퓨터의 주요 구성요소, 즉 &lt;strong&gt;입력장치와 출력장치, 기억장치, 중앙처리장치를 연결해 주는 버스를 시스템버스&lt;/strong&gt;라고 한다. 이러한 시스템버스는 전송되는 데이터가 의미하는 내용에 따라 &lt;strong&gt;주소버스(address bus)&lt;/strong&gt;, &lt;strong&gt;데이터버스(data bus)&lt;/strong&gt;, &lt;strong&gt;제어버스(control bus)&lt;/strong&gt;로 구분된다.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;span style=&quot;color:DarkOrange&quot;&gt;reference&lt;/span&gt;&lt;br /&gt;
김형근·손진곤 (공저). (2021). 컴퓨터구조. 한국방송통신대학교출판문화원&lt;/p&gt;
</description>
        <pubDate>Sun, 05 Sep 2021 00:00:00 +0900</pubDate>
        <link>https://hyuuny.github.io/computer%20science/%EC%BB%B4%ED%93%A8%ED%84%B0%EC%8B%9C%EC%8A%A4%ED%85%9C/</link>
        <guid isPermaLink="true">https://hyuuny.github.io/computer%20science/%EC%BB%B4%ED%93%A8%ED%84%B0%EC%8B%9C%EC%8A%A4%ED%85%9C/</guid>
        
        <category>2021년 09월</category>
        
        
        <category>Computer Science</category>
        
      </item>
    
      <item>
        <title>mappedBy</title>
        <description>&lt;h2 id=&quot;mappedby&quot;&gt;&lt;span style=&quot;color:MediumSeaGreen&quot;&gt;mappedBy&lt;/span&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;mappedBy를 알아보기에 앞서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;객체와 테이블이 관계를 맺는 차이&lt;/code&gt;를 알아보자&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/jpa/Annualrelationship.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;객체의 서로 단방향으로 관계를 맺기 때문에 2개의 연관관계가 존재하게 된다.
    &lt;ul&gt;
      &lt;li&gt;회원 -&amp;gt; 팀 : 연관관계 1개(단방향)&lt;/li&gt;
      &lt;li&gt;팀 -&amp;gt; 회원 : 연관관계 1개(단방향)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;반면 테이블은 한쪽이 다른 쪽 pk를 참조하는 방식으로 1개의 연관관계가 존재하게 된다.
    &lt;ul&gt;
      &lt;li&gt;회원 &amp;lt;-&amp;gt; 팀 : 연관관계 1개(양방향)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;객체의-양방향-관계&quot;&gt;&lt;span style=&quot;color:DodgerBlue&quot;&gt;객체의 양방향 관계&lt;/span&gt;&lt;/h6&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;객체의 양뱡향 관계는 사실 &lt;span style=&quot;color:red&quot;&gt;양뱡향 관계가 아니라 서로 다른 단방향 관계 2개&lt;/span&gt;다.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;객체를 &lt;strong&gt;양뱡향으로 참조하려면 단방향 연관관계를 2개 만들어야 한다&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// A -&amp;gt; B (a.getB())&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// B -&amp;gt; A (b.getA())&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h6 id=&quot;테이블의-양방향-관계&quot;&gt;&lt;span style=&quot;color:DodgerBlue&quot;&gt;테이블의 양방향 관계&lt;/span&gt;&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;테이블은 외래 키 하나로 두 테이블의 연관관계를 관리&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;MEMBER.TEAM_ID &lt;strong&gt;외래 키 하나로 양방향 연관관계 가짐&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;양쪽으로 조인할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;
	&lt;span class=&quot;nc&quot;&gt;Join&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Team&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Team_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;member_id&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Team&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; 
	&lt;span class=&quot;nc&quot;&gt;Join&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;member_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Team_id&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;테이블은 한쪽에서 다른쪽 pk를 참조함으로써 관리하게 되지만, 객체는 어떻게 관리해야할지 딜레마에 빠지게 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/jpa/Annualrelationship2.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;객체는 결국 &lt;strong&gt;둘 중 하나를 주인으로 정해야하는데 이게 바로 연관관계의 주인&lt;/strong&gt;이 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h6 id=&quot;연관관계의-주인mappedby&quot;&gt;&lt;span style=&quot;color:DodgerBlue&quot;&gt;연관관계의 주인(mappedBy)&lt;/span&gt;&lt;/h6&gt;
&lt;p&gt;연관관계의 주인은 양뱡향 연관관계에서 나온 말이다.&lt;br /&gt;
객체 양뱡향 연관관계에서는 &lt;strong&gt;둘 중 하나를 주인으로 지정&lt;/strong&gt;해야하며, 다음과 같은 특징이 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;연관관계의 주인만이 외래 키를 관리(등록, 수정)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;주인이 아닌쪽은 읽기만 가능&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;주인은 mappedBy 속성 사용 X&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;주인이 아니면 mappedBy 속성으로 주인 지정&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;연관관계 주인은 &lt;strong&gt;&lt;span style=&quot;color:red&quot;&gt;외래키가 있는 곳을 주인&lt;/span&gt;으로 정한다.&lt;/strong&gt;&lt;br /&gt;
아래 그림에서는 Member.team이 연관관계의 주인이 된다.
&lt;img src=&quot;/assets/images/jpa/Annualrelationship3.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h6 id=&quot;양방향-매핑시-자주-겪게-되는-실수&quot;&gt;&lt;span style=&quot;color:DodgerBlue&quot;&gt;양방향 매핑시 자주 겪게 되는 실수&lt;/span&gt;&lt;/h6&gt;

&lt;p&gt;JPA를 사용하면서 객체간의 양뱡향 연관관계를 다룰 때, 가장 많이 하는 실수는 &lt;strong&gt;한쪽에만 값을 넣고, 다른 쪽에는 값을 넣어주지 않아서 발생하는 문제&lt;/strong&gt;다.&lt;br /&gt;
나 역시 JPA를 처음 실무에서 사용할 때 이 문제를 겪고 해맸던 경험이 있는데, 이 글을 보는 다른 개발자는 이런 실수를 하지 않았으면 하는 마음이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setUsername&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hyuuny&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;em&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;persist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;Team&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;team&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Team&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;team&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;teamA&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;team&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMembers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;em&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;persist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;team&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
위 코드에서 &lt;strong&gt;team.getMembers()에만 값을 넣어줬기 때문에 Member Table의 TEAM_ID에는 값이 들어가지 않는다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Member Table&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;MEMBER_ID&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;USERNAME&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;TEAM_ID&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;hyuuny&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;null&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Team Table&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;TEAM_ID&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;NAME&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;TeamA&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
객체지향적으로 생각해보면 항상 &lt;strong&gt;양쪽&lt;/strong&gt;에 값을 넣어주는 것이 맞다.&lt;br /&gt;
이 문제를 해결하기 위해서는 &lt;strong&gt;양쪽&lt;/strong&gt; 모두 값을 넣어주기만 하면 된다.
&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Team&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;team&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Team&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;team&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;teamA&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;team&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMembers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;em&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;persist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;team&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setUsername&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hyuuny&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTeam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;team&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// team값 세팅&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;em&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;persist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Member Table&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;MEMBER_ID&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;USERNAME&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;TEAM_ID&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;hyuuny&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Team Table&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;TEAM_ID&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;NAME&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;TeamA&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h6 id=&quot;양방향-연관관계-값-세팅을-위한-편의-메서드&quot;&gt;&lt;span style=&quot;color:DodgerBlue&quot;&gt;양방향 연관관계 값 세팅을 위한 편의 메서드&lt;/span&gt;&lt;/h6&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;양방향 매핑시 자주 겪게 되는 실수&lt;/code&gt;에서 다룬 문제를 해결하기 위한 방법으로 &lt;strong&gt;편의 메서드&lt;/strong&gt;가 있다.&lt;br /&gt;
&lt;strong&gt;편의 메서드를 이용하면 한쪽에서 양쪽 모두의 값을 관리할 수 있게 된다.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Entity&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Team&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Id&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@GeneratedValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GenerationType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;IDENTITY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@OneToMany&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mappedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;team&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;members&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 편의 메소드&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addMember&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;changeTeam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// member(반대쪽)에 자기자신(team)을 넣는다.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;members&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setUsername&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hyuuny&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;em&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;persist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;Team&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;team&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Team&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;team&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;teamA&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;team&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addMember&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 편의 메서드 사용&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;em&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;persist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;team&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
편의 메서드는 어느 쪽에 넣어도 상관없다.&lt;br /&gt;
단지 편의 메서드를 사용하면 한쪽에서 양쪽 값을 세팅할 수 있다는 장점이 있다.&lt;br /&gt;
위 코드에서 team에만 값을 넣었지만, &lt;strong&gt;양쪽 모두 값이 들어간 것을 확인&lt;/strong&gt;할 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Member Table&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;MEMBER_ID&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;USERNAME&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;TEAM_ID&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;hyuuny&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Team Table&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;TEAM_ID&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;NAME&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;TeamA&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
        <pubDate>Sat, 04 Sep 2021 00:00:00 +0900</pubDate>
        <link>https://hyuuny.github.io/jpa/mappedBy/</link>
        <guid isPermaLink="true">https://hyuuny.github.io/jpa/mappedBy/</guid>
        
        <category>2021년 09월</category>
        
        
        <category>JPA</category>
        
      </item>
    
      <item>
        <title>객체와 테이블 매핑</title>
        <description>&lt;h2 id=&quot;entity&quot;&gt;&lt;span style=&quot;color:MediumSeaGreen&quot;&gt;@Entity&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;@Entity가 붙은 클래스는 JPA가 관리하게 된다.&lt;/li&gt;
  &lt;li&gt;JPA를 사용해서 테이블과 매핑할 클래스는 @Entity를 필수로 선언해야 한다.&lt;/li&gt;
  &lt;li&gt;@Entity를 사용할 때는 다음과 같은 주의사항이 있다.
    &lt;ul&gt;
      &lt;li&gt;하이버네이트는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;프록시 DB 연산 결과를 상속한 클래스의 기본 생성자를 호출하여 매핑한다&lt;/code&gt;. 이때, 알맞게 결과 값을 넣어주기 위해서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public 또는 protected 레벨의 기본 생성자&lt;/code&gt;가 필요하다.&lt;/li&gt;
      &lt;li&gt;final 클래스, enum, interface, inner 클래스 사용 X&lt;/li&gt;
      &lt;li&gt;저장할 필드에 final 사용 X&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Entity&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Id&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@GeneratedValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GenerationType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;IDENTITY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;span style=&quot;color:DodgerBlue&quot;&gt;name&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;name 속성을 사용하여 JPA에서 사용할 엔티티 이름을 지정할 수 있다.&lt;/li&gt;
  &lt;li&gt;기본값은 클래스의 이름을 그대로 사용한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;같은 클래스 이름이 없다면 가급적 기본값을 사용&lt;/code&gt;하는 것이 좋다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;account&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Member 클래스를 account라는 이름으로 사용하게 된다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Id&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@GeneratedValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GenerationType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;IDENTITY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;table&quot;&gt;&lt;span style=&quot;color:MediumSeaGreen&quot;&gt;@Table&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;@Table은 엔티티와 매핑할 테이블을 지정한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;속성&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;기능&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;기본값&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;name&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;매핑할 테이블 이름 지정&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;엔티티 이름을 사용&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;catalog&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;데이터베이스 catalog 매핑&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;schema&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;데이터베이스 schema 매핑&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;uniqueConstraints(DDL)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;DDL 생성시에 유니크 제약 조건 생성&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Entity&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MBR&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Table명을 MBR로 지정한다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Id&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@GeneratedValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GenerationType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;IDENTITY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/jpa/entity/table.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;테이블명이 MBR임을 확인&lt;/strong&gt;할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;데이터베이스-스키마-자동-생성&quot;&gt;&lt;span style=&quot;color:MediumSeaGreen&quot;&gt;데이터베이스 스키마 자동 생성&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;DDL을 애플리케이션 실행 시점에 자동 생성&lt;/li&gt;
  &lt;li&gt;테이블 중심 → 객체 중심&lt;/li&gt;
  &lt;li&gt;데이터베이스 방언을 활용해서 데이터베이스에 맞는 적절한 DDL 생성&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;이렇게 생성된 DDL은 개발 장비에서만 사용&lt;/strong&gt;하자&lt;/li&gt;
  &lt;li&gt;생성된 DDL은 운영서버에서는 사용하지 않거나, 적절히 다듬은 후 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;데이터베이스-스키마-자동-생성---속성&quot;&gt;&lt;span style=&quot;color:DodgerBlue&quot;&gt;데이터베이스 스키마 자동 생성 - 속성&lt;/span&gt;&lt;/h6&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;옵션&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;create&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;기존테이블 삭제 후 다시 생성(DROP + CREATE)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;create-drop&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;create와 같으나, 종료시점에 테이블 DROP&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;update&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;변경분만 반영&lt;strong&gt;(운영DB에는 사용하지 말자)&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;validate&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;엔티티와 테이블이 정상 매핑되었는지만 확인&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;none&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;사용하지 않음&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&quot;데이터베이스-스키마-자동-생성---주의&quot;&gt;&lt;span style=&quot;color:DodgerBlue&quot;&gt;데이터베이스 스키마 자동 생성 - 주의&lt;/span&gt;&lt;/h6&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;운영 장비에서는 절대 create, create-drop, update 사용하면 안됨.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;개발 초기 단계는 create 또는 update&lt;/li&gt;
  &lt;li&gt;테스트 서버는 update 또는 validate&lt;/li&gt;
  &lt;li&gt;스테이징과 운영 서버는 validate 또는 none&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;ddl-생성-기능&quot;&gt;&lt;span style=&quot;color:DodgerBlue&quot;&gt;DDL 생성 기능&lt;/span&gt;&lt;/h6&gt;
&lt;ul&gt;
  &lt;li&gt;제약조건 추가 : 회원 이름 필수, 10자 초과 X
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nd&quot;&gt;@Column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nullable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;유니크 제약조건 추가
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nd&quot;&gt;@Table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniqueConstraints&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;={&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@UniqueConstraint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;NAME_AGE_UNIQUE&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;columnNames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;NAME&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;AGE&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;DDL 생성 기능은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DDL을 자동 생성할 때만 사용되고 JPA의 실행 로직에는 영향을 주지 않는다.&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Fri, 03 Sep 2021 00:00:00 +0900</pubDate>
        <link>https://hyuuny.github.io/jpa/%EC%97%94%ED%8B%B0%ED%8B%B0-%EB%A7%A4%ED%95%91/</link>
        <guid isPermaLink="true">https://hyuuny.github.io/jpa/%EC%97%94%ED%8B%B0%ED%8B%B0-%EB%A7%A4%ED%95%91/</guid>
        
        <category>2021년 09월</category>
        
        
        <category>JPA</category>
        
      </item>
    
      <item>
        <title>준영속 상태</title>
        <description>&lt;h2 id=&quot;준영속-상태&quot;&gt;&lt;span style=&quot;color:MediumSeaGreen&quot;&gt;준영속 상태&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;준영속 상태란, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;영속상태의 엔티티가 영속성 컨텍스트에서 분리된 것&lt;/code&gt;이다.&lt;/li&gt;
  &lt;li&gt;준영속 상태가 되면 영속성 컨텍스트가 제공하는 기능(변경 감지)을 사용하지 못한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;준영속-상태로-만드는-방법&quot;&gt;&lt;span style=&quot;color:MediumSeaGreen&quot;&gt;준영속 상태로 만드는 방법&lt;/span&gt;&lt;/h2&gt;

&lt;h6 id=&quot;emdetachentity&quot;&gt;&lt;span style=&quot;color:DodgerBlue&quot;&gt;em.detach(entity)&lt;/span&gt;&lt;/h6&gt;
&lt;ul&gt;
  &lt;li&gt;특정 엔티티만 준영속 상태로 전환&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;findMember&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;em&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;findMember&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hyuuny&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// findMember를 준영속 상태로 변경한다.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;em&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;detach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;findMember&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;member : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;findMember&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/jpa/detach/detach1.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;findMember의 name을 “hyuuny”로 변경하였지만, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;commit()전에 준영속 상태가 되어 update 쿼리를 날리지 않는다.&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;emclear&quot;&gt;&lt;span style=&quot;color:DodgerBlue&quot;&gt;em.clear()&lt;/span&gt;&lt;/h6&gt;
&lt;ul&gt;
  &lt;li&gt;영속성 컨텍스트를 완전히 초기화&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 영속 &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 1번째 select query&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;findMember&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;em&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;findMember&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hyuuny&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 영속성 컨텍스트 초기화&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;em&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// select query 발생 &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 2번째 select query&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reFindMember&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;em&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;member : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;findMember&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/jpa/detach/detach2.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;clear()를 사용해서 영속성 컨텍스트를 초기화 했기 때문에 Id가 2L인 객체를 find할 때 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;다시 select 쿼리가 날아간다.&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;emclose&quot;&gt;&lt;span style=&quot;color:DodgerBlue&quot;&gt;em.close()&lt;/span&gt;&lt;/h6&gt;
&lt;ul&gt;
  &lt;li&gt;영속성 컨텍스트 종료&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 02 Sep 2021 00:00:00 +0900</pubDate>
        <link>https://hyuuny.github.io/jpa/%EC%A4%80%EC%98%81%EC%86%8D-%EC%83%81%ED%83%9C/</link>
        <guid isPermaLink="true">https://hyuuny.github.io/jpa/%EC%A4%80%EC%98%81%EC%86%8D-%EC%83%81%ED%83%9C/</guid>
        
        <category>2021년 09월</category>
        
        
        <category>JPA</category>
        
      </item>
    
  </channel>
</rss>