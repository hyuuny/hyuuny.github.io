<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://hyuuny.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://hyuuny.github.io/" rel="alternate" type="text/html" /><updated>2021-08-30T00:06:39+09:00</updated><id>https://hyuuny.github.io/feed.xml</id><title type="html">Hyuuny`s Blog</title><author><name>Kim SeongHyun</name></author><entry><title type="html">영속성 컨텍스트</title><link href="https://hyuuny.github.io/jpa/%EC%98%81%EC%86%8D%EC%84%B1-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8/" rel="alternate" type="text/html" title="영속성 컨텍스트" /><published>2021-08-30T00:00:00+09:00</published><updated>2021-08-30T14:00:00+09:00</updated><id>https://hyuuny.github.io/jpa/%EC%98%81%EC%86%8D%EC%84%B1%20%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8</id><content type="html" xml:base="https://hyuuny.github.io/jpa/%EC%98%81%EC%86%8D%EC%84%B1-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8/">&lt;h2 id=&quot;영속성-컨텍스트&quot;&gt;영속성 컨텍스트&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;영속성 컨텍스트란, &lt;strong&gt;엔티티를 영구 저장하는 환경이라는 뜻&lt;/strong&gt;이다.&lt;/li&gt;
  &lt;li&gt;EntityManager의 persist()를 사용하여, Entity를 저장하고 &lt;strong&gt;영속성 컨텍스트로 관리&lt;/strong&gt;한다.&lt;/li&gt;
  &lt;li&gt;영속성 컨텍스트는 &lt;strong&gt;논리적인 개념&lt;/strong&gt;으로 눈에 보이지 않는다.&lt;/li&gt;
  &lt;li&gt;EntityManager를 통해서 영속성 컨텍스트에 접근한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;엔티티의-생명주기&quot;&gt;엔티티의 생명주기&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;비영속(new/transient)
    &lt;ul&gt;
      &lt;li&gt;영속성 컨텍스트와 전혀 &lt;strong&gt;관계가 없는&lt;/strong&gt; 새로운 상태&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;영속(managed)
    &lt;ul&gt;
      &lt;li&gt;영속성 컨텍스트에 &lt;strong&gt;관리되는&lt;/strong&gt; 상태&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;준영속(detached)
    &lt;ul&gt;
      &lt;li&gt;영속성 컨텍스트에 저장되었다가 &lt;strong&gt;분리된&lt;/strong&gt; 상태&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;삭제(removed)
    &lt;ul&gt;
      &lt;li&gt;말 그대로 &lt;strong&gt;삭제&lt;/strong&gt;된 상태&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Kim SeongHyun</name></author><category term="JPA" /><category term="JPA" /><summary type="html">영속성 컨텍스트 영속성 컨텍스트란, 엔티티를 영구 저장하는 환경이라는 뜻이다. EntityManager의 persist()를 사용하여, Entity를 저장하고 영속성 컨텍스트로 관리한다. 영속성 컨텍스트는 논리적인 개념으로 눈에 보이지 않는다. EntityManager를 통해서 영속성 컨텍스트에 접근한다.</summary></entry><entry><title type="html">Authentication Manager</title><link href="https://hyuuny.github.io/spring%20security/AuthenticationManager/" rel="alternate" type="text/html" title="Authentication Manager" /><published>2021-08-29T00:00:00+09:00</published><updated>2021-08-29T14:00:00+09:00</updated><id>https://hyuuny.github.io/spring%20security/AuthenticationManager</id><content type="html" xml:base="https://hyuuny.github.io/spring%20security/AuthenticationManager/">&lt;h2 id=&quot;spring-security에서-인증authentication은-authenticationmanager가-한다&quot;&gt;Spring Security에서 인증(Authentication)은 AuthenticationManager가 한다.&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Authentication&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;authenticate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Authentication&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authentication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AuthenticationException&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;인자로 받은 Authentication이 유효한 인증인지 확인&lt;/strong&gt;하고, 
&lt;strong&gt;Authentication객체를 리턴&lt;/strong&gt;한다.&lt;/li&gt;
  &lt;li&gt;인증을 확인하는 과정에서 비활성 계정, 잘못된 비밀번호, 잠긴 계정 등의 에러를 던질 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;인자로-받은-authentication&quot;&gt;인자로 받은 Authentication&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;사용자가 입력한 인증에 필요한 정보(username, password)로 만든 객체다. (폼 인증의 경우)&lt;/li&gt;
  &lt;li&gt;Authentication
    &lt;ul&gt;
      &lt;li&gt;Principal : “hyuuny”&lt;/li&gt;
      &lt;li&gt;Credentials : “secret”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;유효한-인증인지-확인&quot;&gt;유효한 인증인지 확인&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;사용자가 입력한 password가 UserDetailsService를 통해 읽어온 UserDatails객체에 들어 있는
password와 일치하는지 확인한다.
    &lt;ul&gt;
      &lt;li&gt;해당 사용자 계정이 잠겨 있지는 않은지, 비활성 계정은 아닌지 등 확인한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;authentication-객체를-리턴&quot;&gt;Authentication 객체를 리턴&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Authentication
    &lt;ul&gt;
      &lt;li&gt;Principal : UserDetailsService에서 리턴한 객체 (User)&lt;/li&gt;
      &lt;li&gt;Credentials&lt;/li&gt;
      &lt;li&gt;GrantedAuthorities&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Kim SeongHyun</name></author><category term="Spring Security" /><category term="Spring Security" /><summary type="html">Spring Security에서 인증(Authentication)은 AuthenticationManager가 한다.</summary></entry><entry><title type="html">Spring Security Holder</title><link href="https://hyuuny.github.io/spring%20security/SpringContextHolder/" rel="alternate" type="text/html" title="Spring Security Holder" /><published>2021-08-29T00:00:00+09:00</published><updated>2021-08-29T14:00:00+09:00</updated><id>https://hyuuny.github.io/spring%20security/SpringContextHolder</id><content type="html" xml:base="https://hyuuny.github.io/spring%20security/SpringContextHolder/">&lt;h2 id=&quot;security-context-holder&quot;&gt;Security Context Holder&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;SecurityContext 제공, 기본적으로 TreadLocal을 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/spring-security/SecurityContextHolder.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;securitycontext&quot;&gt;SecurityContext&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Authentication 제공&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;authentication&quot;&gt;Authentication&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Principal과 GrantAuthority 제공&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;principal&quot;&gt;Principal&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;“누구”에 해당하는 정보&lt;/li&gt;
  &lt;li&gt;UserDetailsService에서 리턴한 객체&lt;/li&gt;
  &lt;li&gt;객체의 타입은 UserDetail&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;grantauthority&quot;&gt;GrantAuthority&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;“ROLE_USER”, “ROLE_ADMIN”등 Principal이 가지고 있는 “권한”을 나타낸다.&lt;/li&gt;
  &lt;li&gt;인증 이후, 인가 및 권한 확인할 때 이 정보를 참조한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;userdatails&quot;&gt;UserDatails&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;애플리케이션이 가지고 있는 유저 정보와 스프링 시큐리티가 사용하는 
Authentication 객체 사이의 어댑터&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;userdetailsservice&quot;&gt;UserDetailsService&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;유저 정보를 UserDetails 타입으로 가져오는 DAO(Data Access Object) 인터페이스&lt;/li&gt;
  &lt;li&gt;구현은 마음대로 하면 된다.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Kim SeongHyun</name></author><category term="Spring Security" /><category term="Spring Security" /><summary type="html">Security Context Holder</summary></entry><entry><title type="html">Thread Local</title><link href="https://hyuuny.github.io/spring%20security/Thread-Local/" rel="alternate" type="text/html" title="Thread Local" /><published>2021-08-29T00:00:00+09:00</published><updated>2021-08-29T14:00:00+09:00</updated><id>https://hyuuny.github.io/spring%20security/Thread-Local</id><content type="html" xml:base="https://hyuuny.github.io/spring%20security/Thread-Local/">&lt;h3 id=&quot;javalang-패키지에서-제공하는-쓰레드-범위-변수-즉-쓰레드-수준의-데이터-저장소&quot;&gt;java.lang 패키지에서 제공하는 쓰레드 범위 변수. 즉, 쓰레드 수준의 데이터 저장소.&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;같은 쓰레드 내에서만 공유.&lt;/li&gt;
  &lt;li&gt;따라서 같은 쓰레드라면 해당 데이터를 메소드 매개변수로 넘겨줄 필요 없음.&lt;/li&gt;
  &lt;li&gt;SecurityContextHolder의 기본 전략.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AccountContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ThreadLocal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ACCOUNT_THREAD_LOCAL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ThreadLocal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setAccount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Account&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;ACCOUNT_THREAD_LOCAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Account&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAccount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ACCOUNT_THREAD_LOCAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Kim SeongHyun</name></author><category term="Spring Security" /><category term="Spring Security" /><summary type="html">java.lang 패키지에서 제공하는 쓰레드 범위 변수. 즉, 쓰레드 수준의 데이터 저장소. 같은 쓰레드 내에서만 공유. 따라서 같은 쓰레드라면 해당 데이터를 메소드 매개변수로 넘겨줄 필요 없음. SecurityContextHolder의 기본 전략.</summary></entry></feed>